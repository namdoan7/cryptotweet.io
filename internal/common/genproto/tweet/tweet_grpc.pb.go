// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tweet.proto

package tweet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TweetServiceClient is the client API for TweetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TweetServiceClient interface {
	ListTweets(ctx context.Context, in *ListTweetsRequest, opts ...grpc.CallOption) (*ListTweetsResponse, error)
	GetTweet(ctx context.Context, in *GetTweetRequest, opts ...grpc.CallOption) (*GetTweetResponse, error)
	CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error)
	UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*Tweet, error)
}

type tweetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTweetServiceClient(cc grpc.ClientConnInterface) TweetServiceClient {
	return &tweetServiceClient{cc}
}

func (c *tweetServiceClient) ListTweets(ctx context.Context, in *ListTweetsRequest, opts ...grpc.CallOption) (*ListTweetsResponse, error) {
	out := new(ListTweetsResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/ListTweets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) GetTweet(ctx context.Context, in *GetTweetRequest, opts ...grpc.CallOption) (*GetTweetResponse, error) {
	out := new(GetTweetResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/GetTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) CreateTweet(ctx context.Context, in *CreateTweetRequest, opts ...grpc.CallOption) (*CreateTweetResponse, error) {
	out := new(CreateTweetResponse)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/CreateTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tweetServiceClient) UpdateTweet(ctx context.Context, in *UpdateTweetRequest, opts ...grpc.CallOption) (*Tweet, error) {
	out := new(Tweet)
	err := c.cc.Invoke(ctx, "/tweet.TweetService/UpdateTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TweetServiceServer is the server API for TweetService service.
// All implementations should embed UnimplementedTweetServiceServer
// for forward compatibility
type TweetServiceServer interface {
	ListTweets(context.Context, *ListTweetsRequest) (*ListTweetsResponse, error)
	GetTweet(context.Context, *GetTweetRequest) (*GetTweetResponse, error)
	CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error)
	UpdateTweet(context.Context, *UpdateTweetRequest) (*Tweet, error)
}

// UnimplementedTweetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTweetServiceServer struct {
}

func (UnimplementedTweetServiceServer) ListTweets(context.Context, *ListTweetsRequest) (*ListTweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTweets not implemented")
}
func (UnimplementedTweetServiceServer) GetTweet(context.Context, *GetTweetRequest) (*GetTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweet not implemented")
}
func (UnimplementedTweetServiceServer) CreateTweet(context.Context, *CreateTweetRequest) (*CreateTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTweet not implemented")
}
func (UnimplementedTweetServiceServer) UpdateTweet(context.Context, *UpdateTweetRequest) (*Tweet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTweet not implemented")
}

// UnsafeTweetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TweetServiceServer will
// result in compilation errors.
type UnsafeTweetServiceServer interface {
	mustEmbedUnimplementedTweetServiceServer()
}

func RegisterTweetServiceServer(s grpc.ServiceRegistrar, srv TweetServiceServer) {
	s.RegisterService(&TweetService_ServiceDesc, srv)
}

func _TweetService_ListTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).ListTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/ListTweets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).ListTweets(ctx, req.(*ListTweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_GetTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).GetTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/GetTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).GetTweet(ctx, req.(*GetTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_CreateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).CreateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/CreateTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).CreateTweet(ctx, req.(*CreateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TweetService_UpdateTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TweetServiceServer).UpdateTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tweet.TweetService/UpdateTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TweetServiceServer).UpdateTweet(ctx, req.(*UpdateTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TweetService_ServiceDesc is the grpc.ServiceDesc for TweetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TweetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tweet.TweetService",
	HandlerType: (*TweetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTweets",
			Handler:    _TweetService_ListTweets_Handler,
		},
		{
			MethodName: "GetTweet",
			Handler:    _TweetService_GetTweet_Handler,
		},
		{
			MethodName: "CreateTweet",
			Handler:    _TweetService_CreateTweet_Handler,
		},
		{
			MethodName: "UpdateTweet",
			Handler:    _TweetService_UpdateTweet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tweet.proto",
}
